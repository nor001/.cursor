---
description:
globs:
alwaysApply: false
---
# FRONTEND COMPONENT STANDARDS

## üé® Component Architecture

### **Component Structure Pattern**
```typescript
// STANDARD: React component structure
interface ComponentProps {
  // Props interface at top with clear types
  title: string;
  onAction?: (data: any) => void;
  disabled?: boolean;
}

export function ComponentName({ title, onAction, disabled = false }: ComponentProps) {
  // 1. State management
  const [state, setState] = useState<StateType>(initialState);
  
  // 2. Event handlers
  const handleClick = useCallback(() => {
    if (disabled) return;
    onAction?.(data);
  }, [disabled, onAction, data]);
  
  // 3. Effects
  useEffect(() => {
    // Side effects
  }, [dependencies]);
  
  // 4. Render
  return (
    <div className="component-container">
      {/* JSX */}
    </div>
  );
}
```

### **Styling Standards**
- **ALWAYS use Tailwind CSS** for styling
- **Use Framer Motion** for animations
- **Follow component naming conventions**
- **Implement responsive design** by default

---

## üîí Security Patterns

### **Input Validation**
```typescript
// ALWAYS validate user inputs
function validateUserInput(input: string): ValidationResult {
  // Sanitize and validate
  const sanitized = DOMPurify.sanitize(input);
  const isValid = sanitized.length > 0 && sanitized.length < 1000;
  
  return {
    isValid,
    sanitized,
    error: isValid ? null : 'Invalid input'
  };
}
```

### **XSS Prevention**
```typescript
// NEVER render user content directly
// ‚ùå WRONG
<div dangerouslySetInnerHTML={{ __html: userContent }} />

// ‚úÖ CORRECT
<div>{sanitizeContent(userContent)}</div>
```

---

## üì± Mobile & Responsive

### **Touch Event Handling**
```typescript
// ALWAYS handle touch events properly
function setupMobileOptimizations() {
  if (isMobileDevice()) {
    // Prevent double-tap zoom
    document.addEventListener('touchstart', function(e) {
      if (e.touches.length > 1) {
        e.preventDefault();
      }
    });
    
    // Use touch events instead of click
    document.querySelectorAll('.button').forEach(button => {
      button.addEventListener('touchstart', handleTouchStart, { passive: true });
    });
  }
}
```

### **Responsive Breakpoints**
```typescript
// STANDARD: Tailwind responsive breakpoints
const breakpoints = {
  sm: '640px',   // Small devices
  md: '768px',   // Medium devices
  lg: '1024px',  // Large devices
  xl: '1280px',  // Extra large devices
  '2xl': '1536px' // 2X large devices
};
```

---

## üéØ Performance Optimization

### **Component Optimization**
```typescript
// ALWAYS optimize for performance
export const OptimizedComponent = memo(function OptimizedComponent({ data }: Props) {
  // Use React.memo for expensive components
  // Use useCallback for event handlers
  // Use useMemo for expensive calculations
  
  const expensiveValue = useMemo(() => {
    return calculateExpensiveValue(data);
  }, [data]);
  
  const handleClick = useCallback(() => {
    // Handle click
  }, []);
  
  return (
    <div onClick={handleClick}>
      {expensiveValue}
    </div>
  );
});
```

### **Lazy Loading**
```typescript
// ALWAYS lazy load heavy components
const HeavyComponent = lazy(() => import('./HeavyComponent'));

export function App() {
  return (
    <Suspense fallback={<LoadingSpinner />}>
      <HeavyComponent />
    </Suspense>
  );
}
```

---

## üîÑ State Management

### **Local State Pattern**
```typescript
// Use local state for component-specific data
export function FormComponent() {
  const [formData, setFormData] = useState<FormData>({});
  const [errors, setErrors] = useState<ValidationErrors>({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    
    try {
      const validation = validateForm(formData);
      if (!validation.isValid) {
        setErrors(validation.errors);
        return;
      }
      
      await submitForm(formData);
      // Handle success
    } catch (error) {
      setErrors({ general: 'Submission failed' });
    } finally {
      setIsSubmitting(false);
    }
  };
  
  return (
    <form onSubmit={handleSubmit}>
      {/* Form fields */}
    </form>
  );
}
```

### **Global State Pattern**
```typescript
// Use global state for shared data
export function useGlobalState() {
  const [user, setUser] = useState<User | null>(null);
  const [theme, setTheme] = useState<'light' | 'dark'>('light');
  
  return {
    user,
    setUser,
    theme,
    setTheme,
    isAuthenticated: !!user
  };
}
```

---

## üé® UI/UX Patterns

### **Loading States**
```typescript
// ALWAYS provide loading feedback
export function DataComponent() {
  const [data, setData] = useState<Data[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  useEffect(() => {
    loadData()
      .then(setData)
      .catch(err => setError(err.message))
      .finally(() => setLoading(false));
  }, []);
  
  if (loading) return <LoadingSpinner />;
  if (error) return <ErrorMessage message={error} />;
  
  return <DataList data={data} />;
}
```

### **Error Boundaries**
```typescript
// ALWAYS implement error boundaries
export class ComponentErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { hasError: false, error: null };
  }
  
  static getDerivedStateFromError(error: Error): State {
    return { hasError: true, error };
  }
  
  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    console.error('Component error:', error, errorInfo);
    // Send to error reporting service
  }
  
  render() {
    if (this.state.hasError) {
      return <ErrorFallback error={this.state.error} />;
    }
    
    return this.props.children;
  }
}
```

---

## üåê Internationalization

### **i18n Integration**
```typescript
// ALWAYS support internationalization
export function LocalizedComponent() {
  const { t, locale } = useTranslation();
  
  return (
    <div>
      <h1>{t('title')}</h1>
      <p>{t('description')}</p>
      <button>{t('actions.submit')}</button>
    </div>
  );
}
```

### **RTL Support**
```typescript
// ALWAYS support RTL languages
export function RTLAwareComponent() {
  const { dir } = useLocale();
  
  return (
    <div dir={dir} className="rtl-aware">
      {/* Content */}
    </div>
  );
}
```

---

## üß™ Testing Patterns

### **Component Testing**
```typescript
// Test user interactions, not implementation details
test('user can upload CSV file', async () => {
  const file = new File(['test,data'], 'test.csv', { type: 'text/csv' });
  render(<CSVUpload />);
  
  const input = screen.getByLabelText(/upload/i);
  await userEvent.upload(input, file);
  
  expect(screen.getByText(/uploaded successfully/i)).toBeInTheDocument();
});
```

### **Accessibility Testing**
```typescript
// ALWAYS test accessibility
test('component is accessible', () => {
  render(<Component />);
  
  // Check for proper ARIA labels
  expect(screen.getByLabelText(/upload file/i)).toBeInTheDocument();
  
  // Check keyboard navigation
  const button = screen.getByRole('button');
  button.focus();
  expect(button).toHaveFocus();
});
```

---

## üìä Analytics & Monitoring

### **User Interaction Tracking**
```typescript
// Track important user interactions
export function TrackedComponent() {
  const trackEvent = useAnalytics();
  
  const handleAction = () => {
    trackEvent('component_action', {
      component: 'ComponentName',
      action: 'button_click',
      timestamp: Date.now()
    });
    
    // Perform action
  };
  
  return <button onClick={handleAction}>Action</button>;
}
```

### **Performance Monitoring**
```typescript
// Monitor component performance
export function MonitoredComponent() {
  useEffect(() => {
    const startTime = performance.now();
    
    return () => {
      const duration = performance.now() - startTime;
      if (duration > 100) {
        console.warn(`Slow component render: ${duration}ms`);
      }
    };
  });
  
  return <div>Component content</div>;
}
```
